"""
Jasper Wang
A01362031
"""

from dialogue.render_dialogue import play_dialogues_from_file
from enviroment.level import play_game_level


# TODO: modify character docstrings in different functions according to new stats schemes


# WARNING: sourcing test file for now
def opening_sequence():
    play_dialogues_from_file("assets/dialogues/opening.txt")


# HACK: mock function
def mock_scenario_descriptions():
    """
    Produce a list of predefined scenario descriptions for the test_game board

    :return: a list containing strings representing scenario descriptions
    """
    return [
        "The Server Room Labyrinth",
        "The Library of Obsolete Languages",
        "The Cafeteria of Constant Cravings",
        "The Printer Paper Jam Dungeon",
        "The WiFi Woods",
        "The Echo Hall of Helpdesk Calls",
        "The Lost USB Mines",
        "The Classroom of Endless Lectures",
        "The Firewall Fortress",
        "The Recursive Room",
    ]


def make_character():
    """
    Create a character with 5 HP, located at (0, 0) on the board

    :postcondition: create a test_game character
    :return: a dictionary representing a character with their X and Y coordinates, and their health point
    >>> make_character()
    {'X-coordinate': 0, 'Y-coordinate': 0, 'Essence': 5, 'Wisdom': 5}
    """
    return {
        "X-coordinate": 0,
        "Y-coordinate": 0,
        "Essence": 100,
        "Max Essence": 100,
        "Wisdom": 5,
        "Fury": 5,
        "Quest": None,
    }


def display_stats(character):
    print(f"Current Quest: {character['Quest']}")
    print("+-------------------+")
    print("|    Player Stats   |")
    print("+-------------------+")
    print(f"| Essence: {character['Essence']}/{character['Max Essence']} |")
    print(f"| Wisdom: {character['Wisdom']}        |")
    print("+-------------------+")
    print("| Actions:          |")
    print("| W - Go North      |")
    print("| A - Go West       |")
    print("| S - Go South      |")
    print("| D - Go East       |")
    print("| ! - See Stats     |")
    print("+-------------------+")


# TODO: add displaying character functionality, change docstring
def process_users_action(character):
    """
    Print a prompt to ask for the direction the user wish to move towards

    :postcondition: print a prompt to ask for user input, no data is modified
    :return: an integer representing the user's inputted direction
    """
    AVAILABLE_ACTIONS = "WASDwasd!"

    while True:
        user_choice = input(
            "What would you like to do? (Type ! to see stats and available actions.): "
        )

        if len(user_choice) != 1 or user_choice not in AVAILABLE_ACTIONS:
            print(
                f"Invalid entry, please enter one of the following letters or characters: {', '.join('WASD!')}"
            )
            continue

        if user_choice == "!":
            display_stats(character)
        else:
            return user_choice.upper()


# TODO: Modify control scheme to WASD instead, change docstrings


# TODO: Modify control scheme to WASD instead, change docstrings
def move_character(character, direction):
    """
    Move character's coordinates according to specified direction

    :param character: a test_game character
    :param direction: an integer between 1 and 4 representing a direction
    :precondition: character is a test_game character generated by the make_character() function in this module
    :precondition: direction is an integer between 1 and 4
    :postcondition: change the character's X or Y coordinate according to direction
    :return: None
    >>> character_demo = {"X-coordinate": 2, "Y-coordinate": 0, "Essence": 3}
    >>> move_character(character_demo, 2)
    >>> character_demo['Y-coordinate'] == 1
    True
    >>> character_demo = {"X-coordinate": 2, "Y-coordinate": 3, "Essence": 3}
    >>> move_character(character_demo, 4)
    >>> character_demo['X-coordinate'] == 1
    True
    """
    if direction == "W":
        character["Y-coordinate"] -= 1
    elif direction == "S":
        character["Y-coordinate"] += 1
    elif direction == "D":
        character["X-coordinate"] += 1
    else:
        character["X-coordinate"] -= 1


def check_if_goal_attained(character):
    """
    Determine whether character has reached the goal coordinate

    :param rows: number of rows on the board
    :param columns: number of columns on the board
    :param character: a test_game character
    :precondition: rows is a positive integer larger than 2
    :precondition: columns is a positive integer larger than 2
    :precondition: character is a test_game character generated by the make_character() function, and character is alive
    :postcondition: determine if character has reached the bottom right most coordinate of the board
    :return: a Boolean value of True if character has reached the goal, False otherwise
    >>> check_if_goal_attained(4, 4, {"X-coordinate": 3, "Y-coordinate": 3, "Essence": 3})
    True
    >>> check_if_goal_attained(4, 4, {"X-coordinate": 1, "Y-coordinate": 2, "Essence": 1})
    False
    """
    # TODO: Implement so that it will check character's Quest property, if "complete" then goal attained
    # if (
    #     character["X-coordinate"] == rows - 1
    #     and character["Y-coordinate"] == columns - 1
    # ):
    #     return True
    if character["Quest"] == "Complete":
        return True

    return False


def is_alive(character):
    """
    Check if character is alive

    :param character: a test_game character
    :precondition: character is a test_game character generated by the make_character() function in this module
    :return: a Boolean value of True if character's current HP is higher than 0, False otherwise
    >>> character_demo = {"X-coordinate": 2, "Y-coordinate": 0, "Essence": 3}
    >>> is_alive(character_demo)
    True
    >>> character_demo = {"X-coordinate": 1, "Y-coordinate": 1, "Essence": 0}
    >>> is_alive(character_demo)
    False
    """
    if character["Essence"] == 0:
        return False
    return True


# TODO: modify docstrings


def game():
    MAX_LEVEL = 3
    # HACK: commented out
    opening_sequence()
    character = make_character()
    for level in range(1, MAX_LEVEL + 1):
        character = play_game_level(level, character)
        # TODO: What?
        if character == None:
            return
    pass


def main():
    game()


if __name__ == "__main__":
    main()
    pass
